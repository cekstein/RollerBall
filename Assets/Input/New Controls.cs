//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""Gameplay Control"",
            ""id"": ""aaca3ff8-3b39-41f5-9b2c-95fedfabf6ae"",
            ""actions"": [
                {
                    ""name"": ""CameraLook"",
                    ""type"": ""Value"",
                    ""id"": ""ea87c2b5-02e3-435b-9c46-8c1e6f98d921"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BallRoll"",
                    ""type"": ""Button"",
                    ""id"": ""ad8e8e8f-9334-47c1-8469-8a3735051b6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ec6eafd6-429f-4fd2-8c6e-a21d22cb65b1"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CameraLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay Control
        m_GameplayControl = asset.FindActionMap("Gameplay Control", throwIfNotFound: true);
        m_GameplayControl_CameraLook = m_GameplayControl.FindAction("CameraLook", throwIfNotFound: true);
        m_GameplayControl_BallRoll = m_GameplayControl.FindAction("BallRoll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay Control
    private readonly InputActionMap m_GameplayControl;
    private IGameplayControlActions m_GameplayControlActionsCallbackInterface;
    private readonly InputAction m_GameplayControl_CameraLook;
    private readonly InputAction m_GameplayControl_BallRoll;
    public struct GameplayControlActions
    {
        private @NewControls m_Wrapper;
        public GameplayControlActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraLook => m_Wrapper.m_GameplayControl_CameraLook;
        public InputAction @BallRoll => m_Wrapper.m_GameplayControl_BallRoll;
        public InputActionMap Get() { return m_Wrapper.m_GameplayControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayControlActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayControlActions instance)
        {
            if (m_Wrapper.m_GameplayControlActionsCallbackInterface != null)
            {
                @CameraLook.started -= m_Wrapper.m_GameplayControlActionsCallbackInterface.OnCameraLook;
                @CameraLook.performed -= m_Wrapper.m_GameplayControlActionsCallbackInterface.OnCameraLook;
                @CameraLook.canceled -= m_Wrapper.m_GameplayControlActionsCallbackInterface.OnCameraLook;
                @BallRoll.started -= m_Wrapper.m_GameplayControlActionsCallbackInterface.OnBallRoll;
                @BallRoll.performed -= m_Wrapper.m_GameplayControlActionsCallbackInterface.OnBallRoll;
                @BallRoll.canceled -= m_Wrapper.m_GameplayControlActionsCallbackInterface.OnBallRoll;
            }
            m_Wrapper.m_GameplayControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CameraLook.started += instance.OnCameraLook;
                @CameraLook.performed += instance.OnCameraLook;
                @CameraLook.canceled += instance.OnCameraLook;
                @BallRoll.started += instance.OnBallRoll;
                @BallRoll.performed += instance.OnBallRoll;
                @BallRoll.canceled += instance.OnBallRoll;
            }
        }
    }
    public GameplayControlActions @GameplayControl => new GameplayControlActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IGameplayControlActions
    {
        void OnCameraLook(InputAction.CallbackContext context);
        void OnBallRoll(InputAction.CallbackContext context);
    }
}
